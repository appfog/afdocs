---
layout: doc-page
title: Ruby
weight: 1
---

* [Supported Ruby Versions](#rubyversions)
* [Gems and Gemfiles](#gems)
* [Bundler](#bundler)
* [Rails 2.3](#rails23)
* [Rails 3.0](#rails30)
* [Rails 3.1](#rails31)
* [Rails Console](#rails-console)
* [rake db:seed](#rake-db-seed)
* [Auto-reconfiguration](#autoreconfig)
* [Sinatra](#sinatra)

### Supported Ruby Versions {#rubyversions}

For a list of runtimes that AppFog supports run:

{: .prettyprint}
    $ af runtimes

Ruby 1.8.7 is the default Ruby runtime.

To use Ruby 1.9.3, for example, add the `af  --runtime ruby193` option when you push your code:

{: .prettyprint}
    $ af push <appname> --runtime ruby193

# Gems and Gemfiles {#gems}

AppFog requires a `Gemfile` in your app's root directory. This should list the gems your app needs to run. 

The following Gemfile feature aren't supported yet: 

* gem dependencies on git `URL`s or branches
* gem :path => "some/path"
* platform-conditional gems

AppFog currently only offers one app server for Sinatra and Rails apps: Thin. If you're using Bundler, and nothing in your app's bundle requires Thin, VCAP cannot safely start your app using it. For Rails in such cases, it will fall back to running your app using '`rails server`', which uses WEBrick. For best performance and results, use Thin.

# Bundler {#bundler}

You should use [Bundler](http://gembundler.com/) to package your apps. Run `bundle package; bundle install` each time you modify your Gemfile and before you make an `af push` or `af update` command.

[Isolate](https://github.com/jbarnette/isolate) is not well-supported on AppFog.

# Rails 2.3 {#rails23}

Railsâ€™ '`config.gem`' mechanism, which allows the user to specify a list of gems that the app needs to operate, is limited in that it cannot protect you from multi-deep dependencies (deeply layered gems using other gems). As mitigation, many Rails 2.3 apps have subsequently adopted Gem Bundler.

VCAP currently doesn't detect Rails 2.3 apps. If you need to run a Ruby 2.3 app, disguise it as a Rails 3 app by creating a `config/application.rb` file and a 'config.ru'.

### Bundler

Rails 2.3 has its own gem handling system, but we can override that and use Bundler instead.

Insert the following code in `config/boot.rb`, right above `Rails.boot!`:

{: .prettyprint .linenums}
    class Rails::Boot
        def run
            load_initializer

            Rails::Initializer.class_eval do
                def load_gems
                    @bundler_loaded ||= Bundler.require :default, Rails.env
                end
            end

            Rails::Initializer.run(:set_load_path)
        end
    end

Then create a new file called `config/preinitializer.rb` with the following:

{: .prettyprint .linenums}
    begin
        require "rubygems"
        require "bundler"
    rescue LoadError
        raise "Could not load the bundler gem. Install it with `gem install bundler`."
    end

    if Gem::Version.new(Bundler::VERSION) <= Gem::Version.new("0.9.24")
        raise RuntimeError, "Your bundler version is too old for Rails 2.3." +
            "Run `gem install bundler` to upgrade."
    end

    begin
        # Set up load paths for all bundled gems
        ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)
        Bundler.setup
    rescue Bundler::GemNotFound
        raise RuntimeError, "Bundler couldn't find some gems." +
            "Did you run `bundle install`?"
    end

Get all `config.gem` declarations from your app and put them into the `Gemfile`. If you have declarations in `development.rb`, for example, place them in the named group. Make sure to include Rails itself and at least one source.

{: .prettyprint .linenums}
    source 'http://rubygems.org'
    gem "rails", "~> 2.3.5"
    
    # bundler requires these gems in all environments
    # gem "nokogiri", "1.4.2"
    # gem "geokit"
    
    group :development do
        # bundler requires these gems in development
        # gem "rails-footnotes"
    end
    
    group :test do
        # bundler requires these gems while running tests
        # gem "rspec"
        # gem "faker"
    end

For more details on Bundler support for Rails 2.3, check out [this guide](http://gembundler.com/rails23.html).

Watch out for complicated and confusing bundle settings. While VCAP does its best to handle your configuration, it's possible to write Gemfiles that cannot be satisfied, for example by requesting an old version of Rails and a new version of Rack. These combinations will fail immediately; you won't need to wait to push your app to the cloud to see it break. By the same token, Gemfiles and Gems that are too vague about versions can cause problems as well.

In Bundler groups, mixing multiple techniques for specifying which groups to load where (dev/test/prod) can sometimes cause problems.

When in doubt, be more specific when calling '`Bundler.setup`'. VCAP attempts to be as consistent as possible, but it's possible to confuse the Bundler with badly behaved application bootstrap code.

The `bundle package` command will create a cache directory in your app and store local copies of the required gems, allowing you to run `bundle install` with the `--local` flag for faster load time. This will not work in our case as Bundler currently cannot package gems that need to be fetched from a git repository, and it doesn't attempt to package gems that you have manually specified a path to using the `:path` Gemfile option. The best way to avoid this confusion is to stick to published gems.

Along with published gems, Gemfiles can refer to git repos by url, branch name, etc. and Bundler will build them using a specialized mechanism. VCAP currently has no support for these at all, and apps that need them will fail.

# Rails 3.0 {#rails30}

Ruby on Rails app deployments on AppFog automatically recognize MySQL. For other services, you'll need to access the `VCAP_SERVICES` environment variable. More on that in our [Services doc](/services).

Make sure to use the correct version of the MySQL2 gem in your Gemfile:

{: .prettyprint .linenums}
    # If you use a different database in development, hide it from AppFog
    group :development do
    gem 'sqlite3'
    end
    
    # Rails 3.0 requires version less than 0.3 of mysql2 gem
    group :production do
    gem 'mysql2', '< 0.3'
    end

### Bundle your app:

{: .prettyprint}
    $ bundle package
    $ bundle install

Deploy:

{: .prettyprint}
    $ af push

# Rails 3.1 {#rails31}

Rails 3.1 introduces the asset pipeline. To get the asset pipeline working on AppFog, precompile your assets in your development environment. This compiles them into `public/assets`, at which point you can tweak the production environment configuration before excuting a normal `af push`.

### Gemfile

#### Ruby 1.8

{: .prettyprint .linenums}
    # If you use a different database in development, hide it from AppFog.
    group :development do
    gem 'sqlite3'
    end
    
    # Rails 3.1 can use the latest mysql2 gem.
    group :production do
    gem 'mysql2'
    end

#### Ruby 1.9

{: .prettyprint .linenums}
    # If you use a different database in development, hide it from AppFog.
    group :development do
    gem 'sqlite3'
    end
    
    # Rails 3.1 can use the latest mysql2 gem.
    group :production do
    gem 'mysql2'
    end
    
    # For Ruby 1.9 AppFog requires a tweak to the jquery-rails gem.
    # gem 'jquery-rails'
    gem 'cloudfoundry-jquery-rails'
    
    # For Ruby 1.9 AppFog requires a tweak to devise.
    # Uncomment next line if you plan to use devise.
    # gem 'cloudfoundry-devise', :require => 'devise'

### Bundle your app:

{: .prettyprint}
    $ bundle package
    $ bundle install

### Configs

In `config/environments/production.rb`, change

{: .prettyprint}
    config.serve_static_assets = false

to

{: .prettyprint}
    config.serve_static_assets = true

### Assets

Pre-compile your asset pipeline:

{: .prettyprint}
    $ bundle exec rake assets:precompile

### Version Control System

Commit the current configuration to your version control system. Consider including: + `Gemfile.lock` + gems packaged into `vendor/cache` + assets compiled into `public/assets`.

### Deploy

{: .prettyprint}
    $ af push

# Services

AppFog automatically creates and binds a new MySQL service with the Ruby on Rails jumpstart, and the app is [automatically reconfigured](#autoreconfig) to connect to the service. For more information on services and how to connect to them manually, check out our docs on [Services](/services/overview).

# Rails Console {#rails-console}

To use the Rails console with your database service, [tunnel into the service](/services/tunneling), and choose 'none' when it asks you which client to start:

{: .prettyprint }
    $ af tunnel ror-example-mysql
    Binding Service [ror-example-mysql]: OK
    Stopping Application 'caldecott-aws': OK
    Staging Application 'caldecott-aws': OK
    Starting Application 'caldecott-aws': OK
    Getting tunnel connection info: OK

    Service connection info:
      username : uKaJETLlNmkrs
      password : pYfnUUY3L5jLU
      name     : d77261f24bbae4c889d0a231b3e70a763
      infra    : aws

    Starting tunnel to ror-example-mysql on port 10000.
    1: none
    2: mysql
    3: mysqldump
    Which client would you like to start?: 1
    Open another shell to run command-line clients or
    use a UI tool to connect using the displayed information.
    Press Ctrl-C to exit...

Next, create another database section in your `config/database.yml` file with the service connection info in the `af tunnel` output:

{: .prettyprint .linenums }
    proxied-appfog: 
    adapter: mysql2 
    database : d77261f24bbae4c889d0a231b3e70a763
    username : uKaJETLlNmkrs
    password : pYfnUUY3L5jLU
    port: 10000 
    host: 127.0.0.1

Finally, in a another terminal, run `rails console`, passing in the database environment you created:

{: .prettyprint }
    $ RAILS_ENV=proxied-appfog rails console

That's it, you now have a Rails console proxied to your AppFog database service!

# rake db:seed {#rake-db-seed}

This assumes that you have your Rails app set up, and you have a MySQL service bound to it.

### Tunnel to your bound MySQL service

Use the [af tunnel](/services/tunneling) command to connect to the MySQL service that's bound to your Rails app. When prompted, enter '1' for no client.

{: .prettyprint}
    $ af tunnel 
    1: rails-mysql-example 
    Which service to tunnel to?: 1
    Getting tunnel connection info: OK

    Service connection info: 
    username : <username> 
    password : <password> 
    name : <db-name>

    Starting tunnel to rails-mysql-example on port 10000. 
    1: none 
    2: mysql 
    3: mysqldump 
    Which client would you like to start?: 1 
    Open another shell to run command-line clients or 
    use a UI tool to connect using the displayed information. 
    Press Ctrl-C to exit...

You now have a secure tunnel set up to your MySQL service through which you can run `rake db:seed`.

### Create a new section in your `config/database.yml` file

{: .prettyprint}
    proxied-appfog: 
    adapter: mysql2 
    database: <db-name> 
    username: <username> 
    password: <password> 
    port: 10000 
    host: 127.0.0.1

### Run `rake db:seed`

Start with a simple `seeds.rb` file that just creates one record in your database to test that it works. 

Then, leaving open the terminal window with the tunnel running in it, open a new terminal window and run:

{: .prettyprint}
    $ RAILS_ENV=proxied-appfog rake db:seed

If all goes well, you should have a log file in your `log/` directory called `proxied-appfog.log` that shows the SQL commands running from your `seeds.rb` file. 

{: .prettyprint}
    $ af files ror-example logs/
    startup.log                               8.2K
    stdout.log                                  0B
    proxied-appfog.log                          0B

# Auto-reconfiguration {#autoreconfig}

Ruby on Rails apps deployed on AppFog support auto-reconfiguration for relational database services. This means you can deploy a Rails app on AppFog without changing a single line of code. 

AppFog automatically reconfigures Rails apps by modifying the production settings in your `config/database.yml` file during staging.

While itâ€™s fairly common to put these types of connections in a Rails Initializer File, auto-reconfiguration should work just as well if you create the connection somewhere else within your app.

When your Rails app is staged for deployment, AppFog makes two modifications:

* Adds an additional `cf-autoconfig` gem to your Bundle.
* Adds an Initializer file to `config/initializers` that ensures that all dynamic class modification is done prior to loading other Initializers (and thus before your app executes).

### Limitations

Auto-reconfiguration only works if there's exactly one service of a given service type bound to your app. For example, you can only bind only one relational database service (e.g. MySQL or Postgres) to an app. 

If your app doesnâ€™t follow these limitations, AppFog won't auto-reconfigure your app. 

The auto-reconfiguration mechanism also expects typical Ruby apps. If your app configuration is complex, it may not work. In those cases, you can opt out of auto-reconfiguration:


### Opting out of auto-reconfiguration

AppFog offers a few ways to opt out of the auto-reconfiguration mechanism.

* Create a file in your Rails app called `config/cloudfoundry.yml`. Add the entry `autoconfig: false`.
* Include the `cf-runtime` gem in your app's `Gemfile`.

### Further Reading

For more technical details about how auto-reconfiguration works on AppFog, check out [this blog post](http://blog.cloudfoundry.com/2012/03/12/using-cloud-foundry-services-with-ruby-part-1-auto-reconfiguration/).

# Sinatra {#sinatra}

To use AppFog services with Sinatra, you have to access the `VCAP_SERVICES` environment variable. You can read more about this on the [Services Overview page](/services/overview).

AppFog autodetects your Sintra app by searching for `require 'sinatra'` in the `*.rb` files. It then chooses that file as the main Sinatra app file. 

If you use Bundler to load Sinatra, AppFog may not recognize your app. In this case, you can simply manually tell AppFog that it's a Sinatra app when you push your code: 

{: .prettyprint}
    $ af push
    Would you like to deploy from the current directory? [Yn]:
    Application Name: sinatra-example
    Detected a Standalone Application, is this correct? [Yn]: n
    1: Rails
    2: Spring
    3: Grails
    4: Lift
    5: JavaWeb
    6: Standalone
    7: Sinatra
    8: Node
    9: PHP
    10: Erlang/OTP Rebar
    11: WSGI
    12: Django
    13: Rack
    Select Application Type: 7
    Selected Sinatra Application
    ...


<!--- You can put a comment in your appâ€™s main file like this:

{: .prettyprint .linenums}
    # require 'sinatra'   # required for framework detection in AppFog...
    require 'rubygems'
    require 'bundler'
    Bundler.require
    ...
---> 

# Sample Sinatra App Using DataMapper and Bundler

#### Gemfile

{: .prettyprint .linenums}
    source 'http://rubygems.org'

    gem 'sinatra'
    gem 'data_mapper'

    group :development do
        gem 'dm-sqlite-adapter'
    end

    group :production do
        gem 'dm-mysql-adapter'
    end

#### `sinatra_dm.rb`

The name of this sinatra app will be `sinatra_dm.rb`.

<!--- Note the commented out require of sinatra, which is necessary for proper detection of the appâ€™s main file. --->

<!---    # require 'sinatra'   # required for framework detection in AppFog. --->

{: .prettyprint .linenums}
    # Sample Sinatra app with DataMapper
    # Based on http://sinatra-book.gittr.com/ DataMapper example
    require 'rubygems'
    require 'bundler'
    Bundler.require
    
    if ENV['VCAP_SERVICES'].nil?
        DataMapper::setup(:default, "sqlite3://#{Dir.pwd}/blog.db")
    else
        require 'json'
        svcs = JSON.parse ENV['VCAP_SERVICES']
        mysql = svcs.detect { |k,v| k =~ /^mysql/ }.last.first
        creds = mysql['credentials']
        user, pass, host, name = %w(user password host name).map { |key| creds[key] }
        DataMapper.setup(:default, "mysql://#{user}:#{pass}@#{host}/#{name}")
    end
    
    class Post
        include DataMapper::Resource
        property :id, Serial
        property :title, String
        property :body, Text
        property :created_at, DateTime
    end
    
    DataMapper.finalize
    Post.auto_upgrade!
    
    get '/' do
        @posts = Post.all(:order => [:id.desc], :limit => 20)
        erb :index
    end
    
    get '/post/new' do
        erb :new
    end
    
    get '/post/:id' do
        @post = Post.get(params[:id])
        erb :post
    end
    
    post '/post/create' do
        post = Post.new(:title => params[:title], :body => params[:body])
        if post.save
            status 201
            redirect "/post/#{post.id}"
        else
            status 412
            redirect '/'
        end
    end

### Views

#### Index

{: .prettyprint .linenums}
    <!-- views/index.erb -->

    <h1>All Blog Posts</h1>
    <ul>
        <% @posts.each do |post| %>
            <li><a href="/post/<%= post.id %>"><%= post.title %></a></li>
        <% end %>
    </ul>
    <br />
    <a href="/post/new">Create new post</a>

#### New

{: .prettyprint .linenums}
    <!-- views/new.erb -->

    <h1>Create a new blog post</h1>
    <form action="/post/create" method="POST">
        <p>Title: <input type="text" name="title"></input></p>
        <p>Text: <textarea name="body" rows="10" cols="40"></textarea></p>
        <input type="submit" name="Publish" />
    </form>

#### Post

{: .prettyprint .linenums}
    <!-- views/post.erb -->

    <h1><%= @post.title %></h1>
    <p><%= @post.body %></p>
    <a href="/">All Posts</a>

### Test Locally

{: .prettyprint}
    $ ruby sinatra_dm.rb
    
Then visit <http://localhost:4567/> in your browser.

### Bundle and Push

{: .prettyprint .linenums}
    $ bundle install; bundle package
    $ af push
